---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: rook-ceph-cluster
  namespace: rook-ceph
spec:
  interval: 5m
  chart:
    spec:
      chart: rook-ceph-cluster
      version: v1.13.1
      sourceRef:
        kind: HelmRepository
        name: rook-ceph-charts
        namespace: flux-system
  values:
    toolbox:
      enabled: true

    monitoring:
      enabled: false        # Enable once prometheus is installed

    # Times are in UTC
    configOverride: |
      [global]
      bdev_enable_discard = true
      bdev_async_discard = true

    cephClusterSpec:
      cephVersion:
        image: quay.io/ceph/ceph:v18.2.1
      mgr:
        count: 1    # increase when more nodes are added
        allowMultiplePerNode: false
      mon:
        count: 1    # increase when more nodes are added
        allowMultiplePerNode: false

    network:
      addressRanges:
        public:
          - "10.200.40.0/24"
        cluster:
          - "10.200.2.0/24"

      dashboard:
        enabled: true
        urlPrefix: /

      resources:
        mgr:
          limits:
            cpu: "2000m"
            memory: "2Gi"
          requests:
            cpu: "500m"
            memory: "512Mi"
        mon:
          limits:
            cpu: "2000m"
            memory: "2Gi"
          requests:
            cpu: "1000m"
            memory: "1Gi"
        osd:
          limits:
            cpu: "1500m"
            memory: "3Gi"
          requests:
            cpu: "500m"
            memory: "1Gi"
        prepareosd:
          limits:
            cpu: "1500m"
            memory: "4Mi"
          requests:
            cpu: "500m"
            memory: "500Mi"
        mgr-sidecar:
          limits:
            cpu: "500m"
            memory: "100Mi"
          requests:
            cpu: "100m"
            memory: "40Mi"
        crashcollector:
          limits:
            cpu: "500m"
            memory: "60Mi"
          requests:
            cpu: "100m"
            memory: "60Mi"
        logcollector:
          limits:
            cpu: "500m"
            memory: "1Gi"
          requests:
            cpu: "100m"
            memory: "100Mi"
        cleanup:
          limits:
            cpu: "500m"
            memory: "1Gi"
          requests:
            cpu: "500m"
            memory: "100Mi"

      storage:
        useAllNodes: false
        useAllDevices: false
        config:
          osdsPerDevice: "1"
        nodes:
          # work1 node
          - name: "work1"
            metadataDevice: "sda"
            devices:
              - name: "sdb"
          - name: "work1"
            metadataDevice: "sda"
            devices:
              - name: "sdc"
          # work2 node
          - name: "work2"
            metadataDevice: "sda"
            devices:
              - name: "sdb"
          - name: "work2"
            metadataDevice: "sda"
            devices:
              - name: "sdc"
          # work3 node
          - name: "work3"
            metadataDevice: "sda"
            devices:
              - name: "sdb"

    # To control where various services will be scheduled by kubernetes, use the placement configuration sections below.
    # The example under 'all' would have all services scheduled on kubernetes nodes labeled with 'role=storage-node' and
    # tolerate taints with a key of 'storage-node'.
    placement:
    #   all:
    #     nodeAffinity:
    #       requiredDuringSchedulingIgnoredDuringExecution:
    #         nodeSelectorTerms:
    #           - matchExpressions:
    #             - key: role
    #               operator: In
    #               values:
    #               - storage-node
    #     podAffinity:
    #     podAntiAffinity:
    #     topologySpreadConstraints:
    #     tolerations:
    #     - key: storage-node
    #       operator: Exists
    #   # The above placement information can also be specified for mon, osd, and mgr components
      mon:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: role
                operator: In
                values:
                - rook-mon-node
    #   # Monitor deployments may contain an anti-affinity rule for avoiding monitor
    #   # collocation on the same node. This is a required rule when host network is used
    #   # or when AllowMultiplePerNode is false. Otherwise this anti-affinity rule is a
    #   # preferred rule with weight: 50.
      osd:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: role
                operator: In
                values:
                - rook-osd-node
      mgr:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: role
                operator: In
                values:
                - rook-mgr-node
    #   cleanup:

    ingress:
      dashboard:
        ingressClassName: "internal-nginx"
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        host:
          name: &host "rook.${CLUSTER_NAME}.${INGRESS_DOMAIN}"
          path: "/"
        tls:
          - hosts:
              - *host

#     cephBlockPools:
#       - name: hdd-ec
#         spec:
#           failureDomain: host
#           deviceClass: hdd
#           enableRBDStats: true
#           erasureCoded:
#             dataChunks: 6
#             codingChunks: 2
#         storageClass:
#           enabled: true
#           name: ceph-block
#           isDefault: false
#           reclaimPolicy: Delete
#           allowVolumeExpansion: true
#           mountOptions:
#             - discard
#           parameters:
#             imageFormat: "2"
#             imageFeatures: layering
#             csi.storage.k8s.io/provisioner-secret-name: rook-csi-rbd-provisioner
#             csi.storage.k8s.io/provisioner-secret-namespace: rook-ceph
#             csi.storage.k8s.io/controller-expand-secret-name: rook-csi-rbd-provisioner
#             csi.storage.k8s.io/controller-expand-secret-namespace: rook-ceph
#             csi.storage.k8s.io/node-stage-secret-name: rook-csi-rbd-node
#             csi.storage.k8s.io/node-stage-secret-namespace: rook-ceph
#             csi.storage.k8s.io/fstype: ext4

    cephBlockPoolsVolumeSnapshotClass:
      enabled: true
      name: csi-ceph-blockpool
      isDefault: false
      deletionPolicy: Delete

#     cephFileSystems:
#       - name: cephfs-hdd
#         spec:
#           deviceClass: hdd
#           metadataPool:
#             replicated:
#               size: 3
#           # For erasure coded pools, we have to create a replicated pool as the default data pool and an erasure-coded pool as a secondary pool.
#           dataPools:
#             - name: default
#               failureDomain: host
#               replicated:
#                 size: 3
#             - name: erasurecoded
#               failureDomain: host
#               erasureCoded:
#                 dataChunks: 6
#                 codingChunks: 2
#           metadataServer:
#             activeCount: 3
#             activeStandby: true
#         storageClass:
#           enabled: true
#           isDefault: false
#           name: ceph-filesystem
#           reclaimPolicy: Delete
#           allowVolumeExpansion: true
#           mountOptions:
#             - discard
#           parameters:
#             csi.storage.k8s.io/provisioner-secret-name: rook-csi-cephfs-provisioner
#             csi.storage.k8s.io/provisioner-secret-namespace: rook-ceph
#             csi.storage.k8s.io/controller-expand-secret-name: rook-csi-cephfs-provisioner
#             csi.storage.k8s.io/controller-expand-secret-namespace: rook-ceph
#             csi.storage.k8s.io/node-stage-secret-name: rook-csi-cephfs-node
#             csi.storage.k8s.io/node-stage-secret-namespace: rook-ceph
#             csi.storage.k8s.io/fstype: ext4

    cephFileSystemVolumeSnapshotClass:
      enabled: true
      name: csi-ceph-filesystem
      isDefault: false
      deletionPolicy: Delete

#     cephObjectStores:
#       - name: ceph-objectstore
#         spec:
#           metadataPool:
#             failureDomain: host
#             replicated:
#               size: 3
#           dataPool:
#             failureDomain: host
#             erasureCoded:
#               dataChunks: 2
#               codingChunks: 1
#           preservePoolsOnDelete: true
#           gateway:
#             port: 80
#             # resources:
#             #   requests:
#             #     cpu: 1000m
#             #     memory: 1Gi
#             #   limits:
#             #     memory: 2Gi
#             instances: 1
#           healthCheck:
#             bucket:
#               interval: 60s
#         storageClass:
#           enabled: true
#           name: ceph-bucket
#           reclaimPolicy: Delete
#           parameters:
#             region: us-east-1
# 