---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-3.0.1/charts/other/app-template/schemas/helmrelease-helm-v2beta2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app bazarr
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 3.5.1
      interval: 15m
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    crds: CreateReplace
    cleanupOnFail: true
    remediation:
      retries: 3
      strategy: uninstall
  rollback:
    recreate: true
    cleanupOnFail: true
  uninstall:
    keepHistory: false
  values:
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: ${APP_UID}
        runAsGroup: ${APP_GID}
        fsGroup: ${APP_GID}
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [34,10000]
        seccompProfile: { type: RuntimeDefault }
    controllers:
      bazarr:
        annotations:
          reloader.stakater.com/auto: "true"

        containers:
          app:
            image:
              repository: ghcr.io/onedr0p/bazarr
              tag: 1.4.5
              pullPolicy: IfNotPresent
            env:
              TZ: "${TIMEZONE}"
              BAZARR__INSTANCE_NAME: Bazarr
              BAZARR__PORT: &port 6767
              BAZARR__APPLICATION_URL: &host-cluster "bazarr.${CLUSTER_NAME}.${INGRESS_DOMAIN}"
              BAZARR__LOG_LEVEL: info
            probes:
              liveness: &probes
                enabled: false
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext: &securityContext
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: "0.04"
                memory: "250M"
              limits:
                memory: "6000M"
          subcleaner:
            image:
              repository: registry.k8s.io/git-sync/git-sync
              tag: v4.3.0@sha256:5813a7da0ccd58f6dfb9d5e48480e2877355e6bb3d7d81c8908eb1adc3a23b6e
            env:
              GITSYNC_REPO: https://github.com/KBlixt/subcleaner
              GITSYNC_REF: master
              GITSYNC_PERIOD: 24h
              GITSYNC_ROOT: /add-ons
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 128Mi
            securityContext: *securityContext

    service:
      app:
        controller: *app
        ports:
          http:
            port: *port

    persistence:
      add-ons:
        type: emptyDir
      cache:
        type: emptyDir
        globalMounts:
          - path: /config/cache
      config:
        enabled: true
        existingClaim: ${VOLSYNC_CLAIM}
        advancedMounts:
          bazarr:
            app:
              - path: /config
      log:
        type: emptyDir
        globalMounts:
          - path: /config/log
      scripts:
        type: configMap
        name: bazarr-scripts
        defaultMode: 0775
        globalMounts:
          - readOnly: true
      tmp:
        type: emptyDir
      backup:
        enabled: true
        existingClaim: ceph-filesystem-${APP}-backups
        advancedMounts:
          bazarr:
            app:
              - path: /config/backup
      4kmovies:
        enabled: true
        existingClaim: ceph-filesystem-${APP}-4kmovies
        advancedMounts:
          bazarr:
            app:
              - path: /mnt/unionfs/Media/4KMovies/
      4ktv:
        enabled: true
        existingClaim: ceph-filesystem-${APP}-4ktv
        advancedMounts:
          bazarr:
            app:
              - path: /mnt/unionfs/Media/4KTV/
      music:
        enabled: true
        existingClaim: ceph-filesystem-${APP}-music
        advancedMounts:
          bazarr:
            app:
              - path: /mnt/unionfs/Media/Music/
      movies:
        enabled: true
        existingClaim: ceph-filesystem-${APP}-movies
        advancedMounts:
          bazarr:
            app:
              - path: /mnt/unionfs/Media/Movies/
      tv:
        enabled: true
        existingClaim: ceph-filesystem-${APP}-tv
        advancedMounts:
          bazarr:
            app:
              - path: /mnt/unionfs/Media/TV
      downloads:
        enabled: true
        existingClaim: ceph-filesystem-${APP}-downloads
        advancedMounts:
          bazarr:
            app:
              - path: /mnt/unionfs/downloads

    ingress:
      app:
        enabled: true
        className: "internal-nginx"
        # annotations:
        #   cert-manager.io/cluster-issuer: letsencrypt-production
        #   traefik.ingress.kubernetes.io/router.entrypoints: websecure
        #   # traefik.ingress.kubernetes.io/router.middlewares: "network-chain-global-auth@kubernetescrd"
        #   traefik.ingress.kubernetes.io/router.middlewares: network-chain-external@kubernetescrd
        #   external-dns.alpha.kubernetes.io/cloudflare-proxied: "false"
        #   external-dns.alpha.kubernetes.io/target: ingress.${INGRESS_DOMAIN}
        #   external-dns/is-public: "true"
        #   external-dns/powerdns: "true"
        hosts:
          - host: *host-cluster
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: app
                  port: http
          - host: &host "bazarr.${INGRESS_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: app
                  port: http
        tls:
            - hosts:
              - *host-cluster
              - *host


