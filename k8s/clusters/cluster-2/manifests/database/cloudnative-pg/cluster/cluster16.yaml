# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/postgresql.cnpg.io/cluster_v1.json
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: postgres16
spec:
  instances: 2
  imageName: ghcr.io/cloudnative-pg/postgresql:16.3-10
  primaryUpdateStrategy: unsupervised
  storage:
    size: 60Gi
    storageClass: ceph-blockpool-nvme
  superuserSecret:
    name: cloudnative-pg-secret
  enableSuperuserAccess: true
  postgresql:
    parameters:
      max_connections: "400"
      shared_buffers: 256MB
  nodeMaintenanceWindow:
    inProgress: false
    reusePVC: true
  resources:
    requests:
      cpu: 500m
    limits:
      memory: 4Gi
  monitoring:
    enablePodMonitor: true
  backup:
    retentionPolicy: 30d
    barmanObjectStore: &barmanObjectStore
      data:
        compression: bzip2
      wal:
        compression: bzip2
        maxParallel: 8
      destinationPath: s3://cloudnative-pg/
      # endpointURL: https://s3.${CLUSTER_NAME}.${INGRESS_DOMAIN}
      endpointURL: https://${CLOUDFLARE_ACCOUNT_TAG}.r2.cloudflarestorage.com/
      # Note: serverName version needs to be inclemented
      # when recovering from an existing cnpg cluster
      serverName: &currentCluster postgres16-v6
      s3Credentials:
        accessKeyId:
          name: cloudnative-pg-secret
          key: AWS_ACCESS_KEY_ID
        secretAccessKey:
          name: cloudnative-pg-secret
          key: AWS_SECRET_ACCESS_KEY
  # Note: previousCluster needs to be set to the name of the previous
  # cluster when recovering from an existing cnpg cluster
  bootstrap:
    # recovery:
    #   source: &previousCluster postgres16
    initdb:
      database: app
      owner: app
      secret:
        name: cluster-app-user

  # Note: externalClusters is needed when recovering from an existing cnpg cluster
  # externalClusters:
  #   - name: *previousCluster
  #     barmanObjectStore:
  #       <<: *barmanObjectStore
  #       serverName: *previousCluster
