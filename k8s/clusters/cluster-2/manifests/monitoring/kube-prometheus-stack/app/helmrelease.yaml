# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  interval: 30m
  maxHistory: 2
  timeout: 20m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 66.3.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 30m
  install:
    crds: CreateReplace
  upgrade:
    crds: CreateReplace
  values:
    crds:
      enabled: true
    cleanPrometheusOperatorObjectNames: true

    ###
    ### Component values
    ###
    alertmanager:
      enabled: false

    kubeApiServer:
      serviceMonitor:
        selector:
          k8s-app: kube-apiserver
    kubeScheduler:
      service:
        selector:
          k8s-app: kube-scheduler
    kubeControllerManager: &kubeControllerManager
      service:
        selector:
          k8s-app: kube-controller-manager
    kubeEtcd:
      <<: *kubeControllerManager # etcd runs on control plane nodes

    kubeProxy:
      enabled: false

    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      metricLabelsAllowlist:
      - pods=[*]
      - deployments=[*]
      - persistentvolumeclaims=[*]
      prometheus:
        monitor:
          enabled: true
          relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels: [ "__meta_kubernetes_pod_node_name" ]
            targetLabel: kubernetes_node
      resources:
        requests:
          cpu: 15m
          memory: 127M
        limits:
          memory: 153M

    nodeExporter:
      enabled: false

    grafana:
      enabled: false
      forceDeployDashboards: true

    ###
    ### Prometheus operator values
    ###
    prometheusOperator:
      resources:
        requests:
          cpu: 35m
          memory: 273M
        limits:
          memory: 326M

      prometheusConfigReloader:
        # resource config for prometheusConfigReloader
        resources:
          requests:
            cpu: 5m
            memory: 32M
          limits:
            memory: 32M

    ###
    ### Prometheus instance values
    ###
    prometheus:
      ingress:
        enabled: true
        ingressClassName: internal-nginx
        pathType: Prefix
        hosts:
        - &host_prometheus prometheus.${INGRESS_DOMAIN}
        tls:
        - hosts:
          - *host_prometheus

      prometheusSpec:
        image:
          registry: quay.io
          repository: prometheus/prometheus
          tag: v3.0.1
        alertingEndpoints:
        - namespace: monitoring
          name: alertmanager
          port: 9093
          apiVersion: v2
        enableAdminAPI: true
        enableFeatures:
        - auto-gomaxprocs
        - memory-snapshot-on-shutdown
        - new-service-discovery-manager
        externalLabels:
          cluster: ${CLUSTER_NAME}
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        replicas: 1
        replicaExternalLabelName: "__replica__" # must match with thanos value `.query.replicaLabel[0]`
        resources:
          requests:
            cpu: 257m
            memory: 3760M
          limits:
            memory: 3760M
        ruleSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        walCompression: true
        retention: 30d
        retentionSize: 90GB
        scrapeInterval: 1m
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: "ceph-blockpool-nvme"
              resources:
                requests:
                  storage: 100Gi

    additionalPrometheusRulesMap:
      dockerhub-rules:
        groups:
        - name: dockerhub
          rules:
          - alert: DockerhubRateLimitRisk
            annotations:
              summary: Kubernetes cluster Dockerhub rate limit risk
            expr: count(time() - container_last_seen{image=~"(docker.io).*",container!=""} < 30) > 100
            labels:
              severity: critical
      oom-rules:
        groups:
        - name: oom
          rules:
          - alert: OomKilled
            annotations:
              summary: Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.
            expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
            labels:
              severity: critical
      zfs-rules:
        groups:
        - name: zfs
          rules:
          - alert: ZfsUnexpectedPoolState
            annotations:
              summary: ZFS pool {{$labels.zpool}} on {{$labels.instance}} is in a unexpected state {{$labels.state}}
            expr: node_zfs_zpool_state{state!="online"} > 0
            labels:
              severity: critical

  postRenderers:
  - kustomize:
      patches:
      - target:
          version: v1
          kind: ConfigMap
          labelSelector: grafana_dashboard in (1)
        patch: |-
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: not-used
            namespace: not-used
            annotations:
              grafana_folder: Kubernetes
