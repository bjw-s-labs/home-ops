---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app autoscan
  namespace: media
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      version: 2.0.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
      interval: 15m
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    controller:
      type: statefulset
      annotations:
        reloader.stakater.com/auto: "true"
    global:
      nameOverride: *app
    fullnameOverride: *app
    image:
      repository: cloudb0x/autoscan
      tag: "1.4.0"

    # podSecurityContext:
    #   runAsUser: 568
    #   runAsGroup: 100
    #   fsGroup: 100
    #   supplementalGroups:
    #     - 34
    #     - 100
    #   fsGroupChangePolicy: "OnRootMismatch"

    env:
      TZ: "${TIMEZONE}"

    service:
      main:
        ports:
          http:
            port: 3030

    hostAliases:
      - ip: "10.200.1.50"
        hostnames:
          - "plex.${INGRESS_DOMAIN}"
          - "plex.${CLUSTER_NAME}.${INGRESS_DOMAIN}"

    probes:
      liveness:
        enabled: true
        custom: true
        ## The spec field contains the values for the default livenessProbe.
        ## If you selected custom: true, this field holds the definition of the livenessProbe.
        spec:
          exec:
            command:
              - /usr/bin/env
              - bash
              - -c
              - username=`grep -B 1 'username:' /config/config.yml | tail -n1 | awk '{ print $2}'` &&
                password=`grep -B 1 'password:' /config/config.yml | tail -n1 | awk '{ print $2}'` &&
                curl --fail $username:$password@localhost:3030/triggers/manual
          failureThreshold: 5
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10

    persistence:
      config:
        enabled: true
        existingClaim: autoscan-config
      configdata:
        enabled: false
        type: secret
        name: autoscan-secret
        defaultMode: 0550
        items:
          - key: config.yml
            path: config.yml
        mountPath: /test/
        readOnly: true
      4kmovies:
        enabled: true
        existingClaim: cephfs-hdd-media-4kmovies
        mountPath: /mnt/unionfs/Media/4KMovies/
        accessMode: ReadWriteMany
      4ktv:
        enabled: true
        existingClaim: cephfs-hdd-media-4ktv
        mountPath: /mnt/unionfs/Media/4KTV/
        accessMode: ReadWriteMany
      music:
        enabled: true
        existingClaim: cephfs-hdd-media-music
        mountPath: /mnt/unionfs/Media/Music/
        accessMode: ReadWriteMany
      movies:
        enabled: true
        existingClaim: cephfs-hdd-media-movies
        mountPath: /mnt/unionfs/Media/Movies/
        accessMode: ReadWriteMany
      tvw:
        enabled: true
        existingClaim: cephfs-hdd-media-tv
        mountPath: /mnt/unionfs/Media/TV
        accessMode: ReadWriteMany
      downloads:
        enabled: true
        existingClaim: cephfs-hdd-cache-media
        mountPath: /mnt/unionfs/downloads
        accessMode: ReadWriteMany

    ingress:
      main:
        enabled: true
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.middlewares: network-chain-external@kubernetescrd
          external-dns.alpha.kubernetes.io/cloudflare-proxied: "false"
          external-dns.alpha.kubernetes.io/target: ingress.${INGRESS_DOMAIN}
          external-dns/is-public: "true"
          # external-dns.alpha.kubernetes.io/target: ${CLOUDFLARE_TUNNEL_ID}.cfargotunnel.com
          # external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
        hosts:
          - host: &host-cluster "autoscan.${CLUSTER_NAME}.${INGRESS_DOMAIN}"
            paths:
              - path: /
          - host: &host "autoscan.${INGRESS_DOMAIN}"
            paths:
              - path: /
          - host: &cheesee "cheeeese.${INGRESS_DOMAIN}"
            paths:
              - path: /
        tls:
          - secretName: tls.autoscan
            hosts:
              - *host-cluster
              - *host
              - *cheesee

    resources:
      requests:
        memory: "128M"
      limits:
        memory: "500Mi"
