---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: frigate
  namespace: home-automation
spec:
  dependsOn:
    - name: emqx
      namespace: home-automation
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 1.5.0
      interval: 15m
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system

  values:
    controller:
      type: statefulset
      annotations:
        reloader.stakater.com/auto: "true"
    image:
      repository: ghcr.io/blakeblackshear/frigate
      tag: 0.12.0

    podAnnotations:
      configmap.reloader.stakater.com/reload: "frigate-config"

    env:
      TZ: "${TIMEZONE}"
      FRIGATE__INSTANCE_NAME: Frigate
      FRIGATE__PORT: &port 5000
      FRIGATE__APPLICATION_URL: &host-cluster "frigate.${CLUSTER_NAME}.${INGRESS_DOMAIN}"
      FRIGATE__LOG_LEVEL: info

    # podSecurityContext:
    #   runAsUser: 997
    #   runAsGroup: 100
    #   fsGroup: 100
    #   supplementalGroups:
    #     - 34
    #     - 100
    #     - 568
    #   fsGroupChangePolicy: "OnRootMismatch"

    envFrom:
      - secretRef:
          name: frigate-secrets

    service:
      main:
        type: LoadBalancer
        # annotations:
        #   traefik.ingress.kubernetes.io/service.serversscheme: https
        loadBalancerIP: ${LB_FRIGATE}
        ports:
          http:
            port: *port
          rtsp:
            enabled: "true"
            port: 8554
          api:
            enabled: "false"
            port: 1984
          srtp:
            enabled: "false"
            port: 8443
          webrtc:
            enabled: "false"
            port: 8555

    persistence:
      config:
        enabled: true
        type: configMap
        name: frigate-config
        subPath: config.yaml
        mountPath: /config/config.yml
        readOnly: true
      data:
        enabled: true
        existingClaim: frigate-data
      media:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            server: "${NAS_ADDRESS}"
            path: /Security/frigate
        mountPath: /media/frigate
      usb:
        enabled: true
        type: hostPath
        hostPath: /dev/bus/usb
        hostPathType: Directory
        mountPath: /dev/bus/usb
      cache:
        enabled: true
        type: emptyDir
        medium: Memory
        sizeLimit: 512Mi
        mountPath: /dev/shm

    ingress:
      main:
        enabled: true
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.middlewares: network-chain-external@kubernetescrd
          external-dns.alpha.kubernetes.io/cloudflare-proxied: "false"
          # external-dns.alpha.kubernetes.io/target: ingress.${INGRESS_DOMAIN}
          external-dns/is-public: "false"
        hosts:
          - host: &host "frigate.${INGRESS_DOMAIN}"
            paths:
              - path: /
          - host: *host-cluster
            paths:
              - path: /
        tls:
          - secretName: tls.frigate
            hosts:
              - *host
              - *host-cluster

    probes:
      liveness: &probe
        enabled: true
        custom: true
        spec:
          httpGet:
            path: /api/version
            port: *port
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
      readiness:
        enabled: true
        custom: true
        spec:
          httpGet:
            path: /api/version
            port: *port
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
      startup:
        enabled: true
        custom: true
        spec:
          httpGet:
            path: /api/version
            port: *port
          failureThreshold: 30
          periodSeconds: 10

    securityContext:
      privileged: true

    nodeSelector:
      # node-role.kubernetes.io/worker: "true"
      google.feature.node.kubernetes.io/coral: "true"
      # intel.feature.node.kubernetes.io/gpu: "true"
    # affinity:
    #   podAntiAffinity:
    #     requiredDuringSchedulingIgnoredDuringExecution:
    #       - labelSelector:
    #           matchExpressions:
    #             - key: app.kubernetes.io/name
    #               operator: In
    #               values: ["plex"]
    #         topologyKey: kubernetes.io/hostname

    resources:
      requests:
        memory: 300Mi
        cpu: 400m
        # gpu.intel.com/i915: 1
      limits:
        # gpu.intel.com/i915: 1
        memory: 1000Mi
