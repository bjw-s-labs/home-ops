---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  install:
    disableWait: true
    crds: CreateReplace
    remediation:
      retries: 300
  upgrade:
    crds: CreateReplace
    remediation:
      retries: 300
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 45.1.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  values:
    # fullnameOverride: prometheus
    cleanPrometheusOperatorObjectNames: true
    alertmanager:
      config:
        global:
          slack_api_url: "${ALERT_MANAGER_DISCORD_WEBHOOK}"
          resolve_timeout: 5m
        receivers:
          - name: 'null'
          - name: 'discord'
            slack_configs:
              - url: "${SECRET_ALERT_MANAGER_DISCORD_WEBHOOK}"
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}
                text: >-
                  {{ range .Alerts -}}
                    *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}

                  {{ if ne .Annotations.summary ""}}*Summary:* {{ .Annotations.summary }} {{ else if ne .Annotations.message ""}}*Message:* {{ .Annotations.message }} {{ else if ne .Annotations.description ""}}*Description:* {{ .Annotations.description }}{{ end }}

                  *Details:*
                    {{ range .Labels.SortedPairs }} • *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
          - name: 'discord-ceph'
            slack_configs:
              - url: "${SECRET_ALERT_MANAGER_DISCORD_CEPH_WEBHOOK}"
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}
                text: >-
                  {{ range .Alerts -}}
                    *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}

                  {{ if ne .Annotations.summary ""}}*Summary:* {{ .Annotations.summary }} {{ else if ne .Annotations.message ""}}*Message:* {{ .Annotations.message }} {{ else if ne .Annotations.description ""}}*Description:* {{ .Annotations.description }}{{ end }}

                  *Details:*
                    {{ range .Labels.SortedPairs }} • *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "discord"
          routes:
            - receiver: "null"
              match:
                alertname: KubeCPUOvercommit
            - receiver: "null"
              match:
                alertname: PrometheusRuleFailures
            - receiver: "null"
              match:
                alertname: Watchdog
            - receiver: "discord"
              match_re:
                severity: critical
              continue: true
            - receiver: "discord-ceph"
              match_re:
                ceph: ceph
              continue: true
        inhibit_rules:
          - source_match:
              severity: "critical"
            target_match:
              severity: "warning"
            equal: ["alertname", "namespace"]
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          external-dns.alpha.kubernetes.io/target: ipv4.${INGRESS_DOMAIN}
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.middlewares: network-chain-external@kubernetescrd
        hosts:
          - "alert-manager.${CLUSTER_NAME}.${INGRESS_DOMAIN}"
        tls:
          - hosts:
              - "alert-manager.${CLUSTER_NAME}.${INGRESS_DOMAIN}"
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: "rook-ceph-block-external"
              resources:
                requests:
                  storage: 1Gi
    kubeApiServer:
      enabled: true

    kubeControllerManager:
      enabled: false

    kubeEtcd:
      enabled: false

    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance

    kubeProxy:
      enabled: false

    kubeScheduler:
      enabled: false

    kubeStateMetrics:
      enabled: true
    kube-state-metrics:
      metricLabelsAllowlist:
        - "persistentvolumeclaims=[*]"
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
      resources:
        requests:
          cpu: 15m
          memory: 127M
        limits:
          memory: 153M

    nodeExporter:
      enabled: true
    prometheus-node-exporter:
      resources:
        requests:
          cpu: 23m
          memory: 64M
        limits:
          memory: 64M
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node

    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true

    additionalScrapeConfigs:
            - job_name: ceph-exporter
              scrape_interval: 1m
              scrape_timeout: 10s
              honor_timestamps: true
              static_configs:
                - targets:
                    - "pve01.ceph.${INGRESS_DOMAIN}:9128"
                    - "pve02.ceph.${INGRESS_DOMAIN}:9128"
            - job_name: coredns
              scrape_interval: 1m
              scrape_timeout: 10s
              honor_timestamps: true
              static_configs:
                - targets:
                    - "vyos.${INGRESS_DOMAIN}:9153"
            - job_name: node-exporter
              scrape_interval: 1m
              scrape_timeout: 10s
              honor_timestamps: true
              static_configs:
                - targets:
                    - "nas00.${INGRESS_DOMAIN}:9100"
                    - "pve01.server.${INGRESS_DOMAIN}:9100"
                    
    prometheusOperator:
      prometheusConfigReloader:
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
          limits:
            memory: 100Mi
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          external-dns.alpha.kubernetes.io/target: ipv4.${INGRESS_DOMAIN}
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.middlewares: network-chain-external@kubernetescrd
        hosts:
          - "prometheus.${CLUSTER_NAME}.${INGRESS_DOMAIN}"
        tls:
          - hosts:
              - "prometheus.${CLUSTER_NAME}.${INGRESS_DOMAIN}"
#      thanosService:
#        enabled: true
#      thanosServiceMonitor:
#        enabled: true
      prometheusSpec:
        replicas: 3
        replicaExternalLabelName: "replica"
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 6h
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              # storageClassName: "ceph-block-external"
              storageClass: local-path
              resources:
                requests:
                  storage: 20Gi
#        thanos:
#          image: quay.io/thanos/thanos:v0.26.0
#          version: v0.22.0
#          objectStorageConfig:
#            name: thanos-objstore
#            key: objstore.yml