---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  apply-node:
    desc: Apply Talos config for a node [NODE=required] [MODE=auto]
    vars:
      DRYRUN: >-
        {{.DRYRUN | default false}}
      MODE: >-
        {{.MODE | default "auto"}}
      INSECURE:
        sh: talosctl --nodes {{.NODE}} get machineconfig &> /dev/null || echo true
    requires:
      vars:
        - NODE
    preconditions:
      - op user get --me
      - talosctl config info
      - test -f {{.TALOS_DIR}}/controlplane.yaml
      - test -f {{.TALOS_DIR}}/schematic.yaml
      - test -f {{.TALOS_DIR}}/nodes/{{.NODE}}.yaml
      - which cat op talosctl
    cmd: >-
      cat {{.TALOS_DIR}}/controlplane.yaml \
        | op inject \
        | talosctl --nodes {{.NODE}} apply-config \
          --mode {{.MODE}} \
          --config-patch @{{.TALOS_DIR}}/nodes/{{.NODE}}.yaml \
          --file /dev/stdin {{if .INSECURE}}--insecure{{end}} {{if eq .DRYRUN "true"}}--dry-run{{end}}

  apply-cluster:
    desc: Apply the Talos config on all nodes for an existing cluster [CLUSTER=main]
    vars:
      NODES:
        sh: kubectl get nodes --output=jsonpath='{.items[*].metadata.name}'
    preconditions:
      - talosctl config info --talosconfig {{.TALOS_DIR}}/talosconfig
      - test -f {{.TALOS_DIR}}/talosconfig
    cmds:
      - for:
          var: NODES
        task: apply-node
        vars:
          NODE: "{{.ITEM}}"
          DRYRUN: >-
            {{.DRYRUN | default "false"}}

  upgrade-node:
    desc: Upgrade Talos on a single node [NODE=required]
    vars:
      TALOS_IMAGE:
        sh: >-
          talosctl --nodes {{.NODE}} get machineconfig --output=jsonpath='{.spec}' \
            | yq '.machine.install.image | select(. != null)'
    requires:
      vars:
        - NODE
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODE}} get machineconfig
      - which talosctl yq
    cmd: talosctl --nodes {{.NODE}} upgrade --image={{.TALOS_IMAGE}} --timeout=10m

  reset-node:
    desc: Reset Talos on a single node [NODE=required]
    prompt: Reset Talos node '{{.NODE}}' ... continue?
    vars:
      MODE: >-
        {{.MODE}}
    requires:
      vars:
        - NODE
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODE}} get machineconfig
      - which talosctl
    cmd: talosctl --nodes {{.NODE}} reset --graceful=false --user-disks-to-wipe u-local-hostpath {{if eq .MODE "reboot"}}--reboot{{end}}

  reset-cluster:
    desc: Reset Talos across the whole cluster
    prompt: Reset the Talos cluster ... continue?
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODES}} get machineconfig
      - which jq talosctl
    vars:
      NODES:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(",")'
    cmd: talosctl --nodes {{.NODES}} reset --graceful=false --user-disks-to-wipe u-local-hostpath

  generate-kubeconfig:
    desc: Generate the kubeconfig for a Talos cluster
    vars:
      RANDOM_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.RANDOM_CONTROLLER}} get machineconfig
      - which jq talosctl
    cmd: talosctl kubeconfig --nodes {{.RANDOM_CONTROLLER}} --force {{.KUBERNETES_DIR}}

  generate-iso:
    desc: Generate a Talos ISO image
    vars:
      TALOS_SCHEMATIC:
        sh: task --silent talos:generate-schematic
    requires:
      vars:
        - VERSION
    preconditions:
      - test -f {{.TALOS_DIR}}/schematic.yaml
      - which wget task
    cmd: >-
      wget -O {{.TALOS_DIR}}/talos-{{.VERSION}}.iso \
          https://factory.talos.dev/image/{{.TALOS_SCHEMATIC}}/{{.VERSION}}/metal-amd64.iso

  generate-schematic:
    desc: Generate a Talos schematic
    cmd: |
      cat {{.TALOS_DIR}}/schematic.yaml \
        | curl --silent -X POST --data-binary @- https://factory.talos.dev/schematics \
        | jq --raw-output '.id'
    preconditions:
      - test -f {{.TALOS_DIR}}/schematic.yaml
      - which curl jq
